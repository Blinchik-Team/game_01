local EnemyInfo = require "game.enemy.enemy_info"

local function die(self)
	spine.play_anim(self.url_spinemodel, "dead", go.PLAYBACK_ONCE_FORWARD, { track = 1 }, function ()
		go.delete()
	end)
end

function init(self)
	self.player_id = self.player_id
	self.enemy_id = self.enemy_id or 1 -- Цверг-задира (укажите правильный id)
	self.wave_number = self.wave_number or 1

	local data = EnemyInfo[self.enemy_id]
	self.max_hp = math.floor(data.health * (data.hpMultiplierPerWave ^ self.wave_number))
	self.current_hp = self.max_hp

	self.speed = data.speed * (data.speedMultiplierPerWave ^ self.wave_number)
	self.tackle_speed = self.speed * 2 -- скорость тарана в 2 раза больше обычной

	self.is_moving = false
	self.is_tackling = false
	self.tackle_duration = 2 -- длительность тарана в секундах
	self.tackle_cooldown = math.random(2, 3) -- время между таранными атаками

	self.tackle_timer = 0
	self.cooldown_timer = self.tackle_cooldown

	self.tackle_direction = vmath.vector3()

	self.url_spinemodel = "#spinemodel"

	spine.play_anim(self.url_spinemodel, "idle", go.PLAYBACK_LOOP_FORWARD, { track = 1 })
end

function update(self, dt)
	if not self.player_id then
		print("No player_id")
		return
	end

	local player_pos = go.get_position(self.player_id)
	local enemy_pos = go.get_position()

	if self.is_tackling then
		-- Таран: бежим в сохранённом направлении с повышенной скоростью
		local new_pos = enemy_pos + self.tackle_direction * self.tackle_speed * dt
		go.set_position(new_pos)

		self.tackle_timer = self.tackle_timer - dt
		if self.tackle_timer <= 0 then
			self.is_tackling = false
			self.cooldown_timer = math.random(2, 3)
			spine.play_anim(self.url_spinemodel, "idle", go.PLAYBACK_LOOP_FORWARD)
		end
	else
		-- Преследование игрока
		local direction = player_pos - enemy_pos
		local distance = vmath.length(direction)
		if distance > 0 then
			direction = vmath.normalize(direction)
			local new_pos = enemy_pos + direction * self.speed * dt
			go.set_position(new_pos)
		end

		self.cooldown_timer = self.cooldown_timer - dt
		if self.cooldown_timer <= 0 then
			-- Запуск тарана
			self.is_tackling = true
			self.tackle_timer = self.tackle_duration
			self.tackle_direction = vmath.normalize(player_pos - enemy_pos)
			spine.play_anim(self.url_spinemodel, "attack", go.PLAYBACK_ONCE_FORWARD, { track = 1 })
		else
			if not self.is_moving then
				spine.play_anim(self.url_spinemodel, "run", go.PLAYBACK_LOOP_FORWARD)
				self.is_moving = true
			end
		end
	end

	-- Отражение spine-модели по оси X в сторону движения
	local scale = go.get_scale()
	local facing_dir = self.is_tackling and self.tackle_direction or (player_pos - go.get_position())
	if facing_dir.x < 0 then
		scale.x = -math.abs(scale.x)
	else
		scale.x = math.abs(scale.x)
	end
	go.set(go.get_id(), "scale", scale)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("damage") then
		self.current_hp = self.current_hp - message.amount
		if self.current_hp <= 0 then
			die(self)
		end
	elseif message_id == hash("request_player_id") then
		msg.post(sender, "response_enemy_id", { enemy_url = go.get_id() })
	elseif message_id == hash("player_id") then
		self.player_id = message.player_id
	end
end
