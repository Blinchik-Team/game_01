local GAME_STATE = require("game.core.game_state")
local GAME_OVER = "game_over"

local TIMER_WAVE_LEVEL = 5

local function random_position()
	return vmath.vector3(math.random(64, 1156 - 128), math.random(64, 640 - 128), 0)
end

local function spawn_enemies()
	return factory.create("#enemiesfactory", random_position())
end

local function spawn_player(position)
	return factory.create("#playerfactory", position)
end

function init(self)	
	math.randomseed(os.time())
	self.player_id = factory.create("#playerfactory", vmath.vector3(600, 300, 0))

	
	
	self.enemies = {}
	msg.post(".", "acquire_input_focus")
	-- for i = 1, 10 do
	-- 	local enemy_id = spawn_enemies()
	-- 	table.insert(self.enemies, enemy_id)
	-- 	msg.post(enemy_id, "set_player", { player_id = self.player_id })
	-- end
	-- msg.post(".", "acquire_input_focus")
	--spawn_enemies()
	-- Инициализация таймера для спавна врагов
	self.spawn_timer = 0
	self.current_wave = 1 -- текущий номер волны
	self.wave_duration = 30 --2 -- 30 -- длительность волны в секундах
	self.spawn_interval = 1 -- Интервал спавна в секундах
	self.total_time = 0 -- Общее время, прошедшее с начала игры
	self.spawn_enabled = true -- Флаг разрешения спавна
	self.show_shop = false
	msg.post("/view#arena", "show_wave_timer")
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- Отключаем спавн врагов через TIMER_WAVE_LEVEL секунд
	if self.current_wave == 3 then 
		msg.post("/view#death", "game_over")
		go.delete(self.player_id)
		GAME_STATE.set_state("game_over")
	else
		-- print("Update running, total_time:", self.total_time)
		self.total_time = self.total_time + dt
		if self.total_time >= self.wave_duration and not self.show_shop then
			self.spawn_enabled = false
			self.show_shop = true
			GAME_STATE.set_state("game_shop")
			msg.post("/view#shop", "on_shop")
		end

		if self.spawn_enabled then
			self.spawn_timer = self.spawn_timer + dt
			if self.spawn_timer >= self.spawn_interval then
				local enemy_id = spawn_enemies()
				table.insert(self.enemies, enemy_id)
				if go.exists(self.player_id) then
					msg.post(enemy_id, "set_player", { player_id = self.player_id })
				end
				self.spawn_timer = self.spawn_timer - self.spawn_interval
			end
		end
		-- Отправка оставшегося времени таймера в GUI (TIMER_WAVE_LEVEL секунд минус текущее время)
		local time_left = math.max(0, self.wave_duration - math.floor(self.total_time))
		msg.post("/view#arena", "update_timer", { time = time_left, current_wave = self.current_wave })
	end
end

function on_input(self, action_id, action)
	if action_id == hash("escape") and action.released then
		msg.post("/view#pause_menu", "pause")
		msg.post("/view#pause_menu", "acquire_input_focus")
	end
	if action_id == hash("console") and action.released then 
		msg.post("/view#develop", "console", { player_stats = self.player_stats})
		msg.post("#", "release_input_focus")
		msg.post(self.player_id, "release_input_focus")
		GAME_STATE.set_state("develop_console")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("game_over") then
		GAME_STATE.set_state("game_over")
		if GAME_STATE.get_state() == "game_over" then
			msg.post("/view#death", "game_over")
			msg.post(".", "acquire_input_focus") -- чтобы не багалось
		end
	end 
	if message_id == hash("new_wave") then
		self.spawn_timer = 0
		self.spawn_enabled = true
		self.total_time = 0  -- если используется для контроля времени волны
		-- Респавн мобов на новой волне и установка игрока в центр экрана
		for _, enemy_id in ipairs(self.enemies) do
			if go.exists(enemy_id) then
				go.delete(enemy_id)
			end
		end
		self.enemies = {}
		local center_position = vmath.vector3(600, 300, 0)
		if go.exists(self.player_id) then
			go.set_position(center_position, self.player_id)
		else
			-- если игрока нет, создайте заново
			self.player_id = spawn_player(center_position)
		end
		-- Закрываем магазин
		msg.post("/view#shop", "off_shop")
		self.current_wave = self.current_wave + 1
		self.total_time = 0
		self.spawn_enabled = true
		self.show_shop = false
		-- Рассчитайте таймер волны
		if self.current_wave == 16 then
			self.wave_duration = 90
			-- старт босса
		elseif self.current_wave > 16 then
			self.wave_duration = 60
			-- бесконечный режим, добавьте изменённые свойства
		else
			self.wave_duration = math.min(30 + (self.current_wave - 1) * 5, 60)
			--self.wave_duration = 4
		end

		-- Сообщить GUI для обновления таймера, состояния и т.д.
		msg.post("/view#arena", "show_wave_timer", {current_wave = self.current_wave} )
		GAME_STATE.set_state("game")
	end
	if message_id == hash("player_stats") then
		self.player_stats = message.player_stats
	end
	if message_id == hash("close_console") then
		msg.post(self.player_id, "acquire_input_focus")
		GAME_STATE.set_state("game")
	end
end 