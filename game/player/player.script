local COLLISION_RESPONSE = hash("collision_response")
local TRIGGER_RESPONSE = hash("trigger_response")
local ENEMIES = hash("enemies")

-- Инициализация игрока
function init(self)
	msg.post(".", "acquire_input_focus")
	self.moving = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
	self.speed = 300
	self.current_animation = "idle"
	self.enemies_in_range = {}
	self.fire_cooldown = 0
	self.fire_interval = 0.5
	self.fire_range = 600
	print("Player initialized: fire_range=" .. self.fire_range .. ", fire_interval=" .. self.fire_interval)
	print("Player position: " .. tostring(go.get_position()))
end

-- Очистка
function final(self)
	msg.post(".", "release_input_focus")
end

-- Вычисление расстояния
local function distance_to(my_pos, other_id)
	if go.exists(other_id) then
		local other_pos = go.get_position(other_id)
		local dist = vmath.length(my_pos - other_pos)
		print("Distance to " .. tostring(other_id) .. ": " .. dist)
		return dist
	end
	print("Enemy " .. tostring(other_id) .. " does not exist")
	return math.huge
end

-- Поиск ближайшего врага
local function find_closest_enemy(self)
	local closest_id = nil
	local min_distance = self.fire_range
	local my_pos = go.get_position()

	print("Enemies in range: " .. (next(self.enemies_in_range) and "Yes" or "No"))

	for enemy_id, _ in pairs(self.enemies_in_range) do
		if go.exists(enemy_id) then
			local dist = distance_to(my_pos, enemy_id)
			if dist <= min_distance then
				min_distance = dist
				closest_id = enemy_id
			end
		else
			self.enemies_in_range[enemy_id] = nil
		end
	end

	if closest_id then
		print("Closest enemy: ID=" .. tostring(closest_id) .. ", Distance=" .. min_distance)
	else
		print("No enemies within fire range")
	end
	return closest_id
end

-- Обновление
function update(self, dt)
	self.fire_cooldown = math.max(0, self.fire_cooldown - dt)

	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end

	self.input.x = 0
	self.input.y = 0
	self.moving = false
	
	-- Автоматическая стрельба
	if self.fire_cooldown <= 0 then
		local my_pos = go.get_position()
		local fire_dir = nil
		local rot = nil

		local closest_enemy = find_closest_enemy(self)
		if closest_enemy and go.exists(closest_enemy) then
			local enemy_pos = go.get_position(closest_enemy)
			fire_dir = vmath.normalize(enemy_pos - my_pos)
			if vmath.length(fire_dir) < 0.1 then
				print("Warning: fire_dir near zero, skipping shot")
				return
			end
			print("Targeting enemy: ID=" .. tostring(closest_enemy) .. ", Pos=" .. tostring(enemy_pos) .. ", Dir=" .. tostring(fire_dir))
		else
			-- Не стреляем, если нет врагов
			return
		end

		local angle = math.atan2(fire_dir.y, fire_dir.x)
		rot = vmath.quat_rotation_z(angle)
		local offset = fire_dir * 50
		local bullet_pos = my_pos + offset
		local bullet_id = factory.create("/arena#bulletsfactory", bullet_pos, rot, { dir = fire_dir })
		self.fire_cooldown = self.fire_interval
		print("Bullet spawned: ID=" .. tostring(bullet_id) .. ", Pos=" .. tostring(bullet_pos) .. ", Dir=" .. tostring(fire_dir))
	end
end

-- Обработка ввода
function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

-- Обработка сообщений
function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE and message.own_group == hash("player") and message.group == ENEMIES then
		go.delete()
		print("Player collided with enemy: ID=" .. tostring(sender))
	elseif message_id == TRIGGER_RESPONSE and message.group == ENEMIES then
		if message.enter then
			self.enemies_in_range[message.other_id] = true
			print("Enemy entered range: ID=" .. tostring(message.other_id) .. ", Pos=" .. tostring(go.get_position(message.other_id)))
		else
			self.enemies_in_range[message.other_id] = nil
			print("Enemy left range: ID=" .. tostring(message.other_id))
		end
	end
	if message_id == hash("contact_point_response") then
		go.set_position(go.get_position() + message.normal * message.distance)
	end	
end